{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","className","display","flex","placeholder","vale","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.792673a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>To-do List</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    );\r\n}\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n  }\r\n\r\nconst linkStyle = {\r\n    color: \"#fff\",\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}\r\n                    { title }\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n//Prop types\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n    render() {\r\n        return this.props.todos.map((todo) => (\r\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n        ));\r\n    }\r\n}\r\n//Prop types\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"title\" \r\n                    style={{ flex: '10', padding: '5px' }} \r\n                    placeholder=\"add todo...\"\r\n                    vale={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input \r\n                    type=\"submit\" \r\n                    value=\"submit\" \r\n                    className=\"btn\" \r\n                    style={{flex: '1'}}\r\n                />\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Prop types\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\nexport default AddTodo\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the ToDoList App v1.0.0 from a React Crash Course</p>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport './App.css';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n//import uuid from 'uuid';\nimport axios from 'axios';\n\nclass App extends Component{\n  state = {\n    todos: []\n  }\n  //use axios to grab a json of todos\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState( { todos: res.data }))\n  }\n  // toggle delete\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo =>  {\n      if(todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    }) });\n  }\n\n  //delete todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({todos: [...this.state.todos.filter\n      (todo => todo.id !== id)] }));\n  }\n\n  //add todo\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    })\n      .then(res => this.setState({ todos: \n      [...this.state.todos, res.data] }) );\n    \n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <Route exact path=\"/\" render={props => (\n            <React.Fragment>\n              <AddTodo addTodo={this.addTodo}/>\n              <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n            </React.Fragment>\n          )} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}