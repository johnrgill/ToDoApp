{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","border","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","className","display","flex","placeholder","vale","paraStyle","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.afce8197.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>To-do List</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    );\r\n}\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n  }\r\n\r\nconst linkStyle = {\r\n    color: \"#fff\",\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}\r\n                    { title }\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n//Prop types\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n    render() {\r\n        return this.props.todos.map((todo) => (\r\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n        ));\r\n    }\r\n}\r\n//Prop types\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"title\" \r\n                    style={{ flex: '10', padding: '5px' }} \r\n                    placeholder=\"add todo...\"\r\n                    vale={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input \r\n                    type=\"submit\" \r\n                    value=\"submit\" \r\n                    className=\"btn\" \r\n                    style={{flex: '1'}}\r\n                />\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Prop types\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\nexport default AddTodo\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <React.Fragment>\r\n        <div style={paraStyle}>\r\n            <h1>About</h1>\r\n                <p>This is the ToDoList App v1.0.0 from a React Crash Course</p>\r\n                <p>Right now it grabs 10 dummy ToDos from a json file, but you can add your own.</p>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nconst paraStyle = {\r\n    padding: '5%'\r\n}\r\n\r\nexport default About;\r\n","import React, {Component} from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Header from './components/layout/Header';\r\nimport './App.css';\r\nimport Todos from './components/Todos';\r\nimport AddTodo from './components/AddTodo';\r\nimport About from './components/pages/About';\r\n//import uuid from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component{\r\n  state = {\r\n    todos: []\r\n  }\r\n  //use axios to grab a json of todos\r\n  componentDidMount() {\r\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\r\n      .then(res => this.setState( { todos: res.data }))\r\n  }\r\n  // toggle delete\r\n  markComplete = (id) => {\r\n    this.setState({todos: this.state.todos.map(todo =>  {\r\n      if(todo.id === id) {\r\n        todo.completed = !todo.completed;\r\n      }\r\n      return todo;\r\n    }) });\r\n  }\r\n\r\n  //delete todo\r\n  delTodo = (id) => {\r\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\r\n      .then(res => this.setState({todos: [...this.state.todos.filter\r\n      (todo => todo.id !== id)] }));\r\n  }\r\n\r\n  //add todo\r\n  addTodo = (title) => {\r\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\r\n      title,\r\n      completed: false\r\n    })\r\n      .then(res => this.setState({ todos: \r\n      [...this.state.todos, res.data] }) );\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Header />\r\n          <Route\r\n\t\t\t\t\t\t\texact\r\n\t\t\t\t\t\t\tpath='/'\r\n\t\t\t\t\t\t\trender={(props) => (\r\n\t\t\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t\t\t<AddTodo addTodo={this.addTodo} />\r\n\t\t\t\t\t\t\t\t\t<Todos\r\n\t\t\t\t\t\t\t\t\t\ttodos={this.state.todos}\r\n\t\t\t\t\t\t\t\t\t\tmarkComplete={this.markComplete}\r\n\t\t\t\t\t\t\t\t\t\tdelTodo={this.delTodo}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Route path='/about' component={About} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}